#ゲームの中核システムをRustで実装。

実装内容:
1. リソース管理システム
   - 宇宙の塵、エネルギー、ダークマター等の計算
   - 生産レートの計算
   - アップグレードシステム

2. 天体管理システム
   - 天体の作成・削除
   - プロパティ管理
   - 親子関係の管理

3. ゲームループ
   - 定期的な更新処理
   - イベントドリブンな更新

実装ファイル:
- src/game/resources.rs
- src/game/celestial_bodies.rs
- src/game/game_loop.rs
- src/game/mod.rs

具体的な実装指示:
rust// 例: リソース計算
pub struct ResourceManager {
    // 実装
}

impl ResourceManager {
    pub fn calculate_production_rates(&self, game_state: &GameState) -> ProductionRates {
        // 実装
    }
    
    pub fn apply_upgrade(&mut self, upgrade_type: UpgradeType) -> Result<(), GameError> {
        // 実装
    }
}




*物理演算とバリデーション
#サーバーサイドの物理演算システムとバリデーションを実装。

1. 物理演算エンジン
   - 重力計算（N体問題）
   - 衝突判定
   - 軌道計算
   - 空間分割による最適化（Octree）

2. アクションバリデーション
   - リソースの所持確認
   - 天体作成位置の妥当性
   - アップグレード条件の確認
   - レート制限

3. 不正検知
   - 異常な値の検出
   - 時間操作の検知
   - 不可能なアクションの防止

実装にはnalgebra crateを使用。



*状態の永続化と復元
#ゲーム状態の効率的な永続化システムを実装。

要件:
1. 定期的な自動セーブ（5分ごと）
2. 差分保存によるストレージ効率化
3. バージョン管理（ロールバック可能）
4. 圧縮（zstd使用）

実装内容:
- 状態のシリアライズ（bincode or MessagePack）
- 差分計算と適用
- データベースへの保存
- 復元処理

マイグレーション戦略も含めてください。


統合テスト
Phase 1: 基盤構築

Step 1 - プロジェクト立ち上げ
プロジェクト全体のアーキテクチャ設計
データベーススキーマ設計（正規化、インデックス戦略）
Cargo.toml、ディレクトリ構造、基本的な設定ファイル
GitHub Actions CI/CD設定

Step 2 - 基本API構築
認証システムの設計（セキュリティ考慮）
基本的なCRUDエンドポイント実装
エラーハンドリングのボイラープレート
APIドキュメント生成

Step 3 - WebSocket基礎  ----  **いまここ**
WebSocketプロトコル設計、状態同期戦略
基本的なWebSocketハンドラー実装
クライアント側の接続コード


Phase 2: コア機能実装

Step 4 - データ永続化
効率的なセーブデータ圧縮・差分更新の設計
SQLxを使った基本的なクエリ実装
マイグレーションファイル作成
トランザクション設計、デッドロック回避策

Step 5 - リアルタイム通信
メッセージキューイング、バックプレッシャー対策
メッセージハンドラーの実装
再接続ロジック
状態の一貫性保証メカニズム

Step 6 - ゲームロジック移行
物理演算の並列化設計
サーバーオーソリティの実装戦略
個別のゲームロジック関数の移植
バリデーションルールの実装

Step 7 - テスト
単体テストの作成
統合テストのセットアップ
負荷テスト設計、ボトルネック分析


Phase 3: 最適化と仕上げ

Step 8 - パフォーマンス最適化
プロファイリング結果の分析と最適化戦略
メモリ使用量の最適化
キャッシングレイヤーの実装
ログ出力の整備

Step 9 - セキュリティ
セキュリティ監査、脆弱性対策
レート制限の実装
入力検証の強化

Step 10 - デプロイ準備
Dockerファイル作成
環境変数設定
プロダクション環境の設計
デプロイスクリプト作成
name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 前提条件チェック
  pre_deploy_checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check deployment conditions
        id: check
        run: |
          # mainブランチの場合はstagingに、手動実行の場合は指定された環境にデプロイ
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for breaking changes
        run: |
          # 過去のコミットとの比較で破壊的変更がないかチェック
          echo "Checking for breaking changes..."
          # ここに破壊的変更の検出ロジックを追加

  # ビルドとテスト
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre_deploy_checks
    if: needs.pre_deploy_checks.outputs.should_deploy == 'true'
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cosmic_gardener_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d cosmic_gardener_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d cosmic_gardener_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: Run full test suite
        run: |
          cargo fmt --all --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --all-features
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cosmic_gardener_test
          REDIS_URL: redis://localhost:6379/1

      - name: Build optimized release
        run: cargo build --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cosmic-gardener-release
          path: target/release/cosmic-gardener-server
          retention-days: 30

  # Docker イメージビルドとプッシュ
  build_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [pre_deploy_checks, build_and_test]
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cosmic-gardener/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.pre_deploy_checks.outputs.environment }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Staging環境へのデプロイ
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre_deploy_checks, build_docker]
    if: needs.pre_deploy_checks.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.cosmic-gardener.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Lightsail
        run: |
          # Lightsailインスタンスにデプロイ
          echo "Deploying to Lightsail staging environment..."
          
          # SSH経由でデプロイメントスクリプトを実行
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > /tmp/lightsail_key
          chmod 600 /tmp/lightsail_key
          
          # デプロイメントスクリプトをコピー
          scp -i /tmp/lightsail_key -o StrictHostKeyChecking=no \
            ./scripts/deploy.sh \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_STAGING_IP }}:/tmp/
          
          # デプロイメント実行
          ssh -i /tmp/lightsail_key -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_STAGING_IP }} \
            "chmod +x /tmp/deploy.sh && /tmp/deploy.sh staging ${{ needs.build_docker.outputs.image_tag }}"

      - name: Health check
        run: |
          echo "Performing health check..."
          sleep 30
          curl -f https://staging.cosmic-gardener.com/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # 基本的なAPIエンドポイントのテスト
          curl -f https://staging.cosmic-gardener.com/api/v1/health || exit 1

  # Production環境へのデプロイ
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre_deploy_checks, build_docker]
    if: needs.pre_deploy_checks.outputs.environment == 'production'
    environment:
      name: production
      url: https://api.cosmic-gardener.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Manual approval required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval"
          issue-body: |
            Please review and approve the production deployment.
            
            **Changes:**
            - Commit: ${{ github.sha }}
            - Image: ${{ needs.build_docker.outputs.image_tag }}
            
            **Pre-deployment checklist:**
            - [ ] All tests passing
            - [ ] Security audit completed
            - [ ] Database migrations reviewed
            - [ ] Rollback plan confirmed

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Blue-Green deployment
        run: |
          echo "Starting blue-green deployment to production..."
          
          # SSH経由でblue-greenデプロイメント実行
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > /tmp/lightsail_key
          chmod 600 /tmp/lightsail_key
          
          # Blue-Greenデプロイメントスクリプトをコピー
          scp -i /tmp/lightsail_key -o StrictHostKeyChecking=no \
            ./scripts/blue-green-deploy.sh \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_PRODUCTION_IP }}:/tmp/
          
          # デプロイメント実行
          ssh -i /tmp/lightsail_key -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_PRODUCTION_IP }} \
            "chmod +x /tmp/blue-green-deploy.sh && /tmp/blue-green-deploy.sh ${{ needs.build_docker.outputs.image_tag }}"

      - name: Production health check
        run: |
          echo "Performing production health check..."
          sleep 60
          for i in {1..10}; do
            if curl -f https://api.cosmic-gardener.com/health; then
              echo "Health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          curl -f https://api.cosmic-gardener.com/api/v1/health || exit 1

  # デプロイメント後処理
  post_deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre_deploy_checks, deploy_staging, deploy_production]
    if: always() && (needs.deploy_staging.result == 'success' || needs.deploy_production.result == 'success')
    
    steps:
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ needs.pre_deploy_checks.outputs.environment }}';
            const success = '${{ needs.deploy_staging.result == 'success' || needs.deploy_production.result == 'success' }}';
            
            if (success === 'true') {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: context.payload.deployment?.id || 0,
                state: 'success',
                environment: environment,
                description: `Successfully deployed to ${environment}`
              });
            }

      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 Cosmic Gardener Backend deployed successfully to ${{ needs.pre_deploy_checks.outputs.environment }}!
            
            📦 Image: ${{ needs.build_docker.outputs.image_tag }}
            🔗 Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          text: |
            ❌ Cosmic Gardener Backend deployment failed!
            
            🔗 Action: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            📋 Environment: ${{ needs.pre_deploy_checks.outputs.environment }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ロールバック用ジョブ
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy_staging.result == 'failure' || needs.deploy_production.result == 'failure')
    needs: [pre_deploy_checks, deploy_staging, deploy_production]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Execute rollback
        run: |
          echo "Executing rollback for ${{ needs.pre_deploy_checks.outputs.environment }}..."
          
          # SSH経由でロールバックスクリプトを実行
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > /tmp/lightsail_key
          chmod 600 /tmp/lightsail_key
          
          if [[ "${{ needs.pre_deploy_checks.outputs.environment }}" == "staging" ]]; then
            IP="${{ secrets.LIGHTSAIL_STAGING_IP }}"
          else
            IP="${{ secrets.LIGHTSAIL_PRODUCTION_IP }}"
          fi
          
          ssh -i /tmp/lightsail_key -o StrictHostKeyChecking=no \
            ${{ secrets.LIGHTSAIL_USER }}@$IP \
            "docker rollback cosmic-gardener-backend"

      - name: Verify rollback
        run: |
          sleep 30
          if [[ "${{ needs.pre_deploy_checks.outputs.environment }}" == "staging" ]]; then
            curl -f https://staging.cosmic-gardener.com/health || exit 1
          else
            curl -f https://api.cosmic-gardener.com/health || exit 1
          fi
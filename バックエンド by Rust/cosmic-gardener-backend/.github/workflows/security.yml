name: Security Audit

on:
  # 毎日午前2時（UTC）に実行
  schedule:
    - cron: '0 2 * * *'
  
  # 手動実行も可能
  workflow_dispatch:
  
  # セキュリティ関連ファイルの変更時
  push:
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '**/Cargo.toml'
      - '.github/workflows/security.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  # 依存関係の脆弱性スキャン
  vulnerability_scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        id: audit
        run: |
          # 脆弱性チェック実行
          cargo audit --format json > audit_results.json || true
          
          # 結果の確認
          if cargo audit; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "Vulnerabilities detected"
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit_results.json
          retention-days: 30

      - name: Parse audit results
        if: steps.audit.outputs.status == 'failure'
        run: |
          echo "## 🚨 Security Vulnerabilities Detected" >> security_report.md
          echo "" >> security_report.md
          
          # JSONからの情報抽出と整理
          if [[ -f audit_results.json ]]; then
            echo "Detailed vulnerability report has been generated."
            cat audit_results.json | jq -r '.vulnerabilities[] | "- **\(.advisory.id)**: \(.advisory.title) (Severity: \(.advisory.severity))"' >> security_report.md || true
          fi

      - name: Create security issue
        if: steps.audit.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reportContent = 'Security vulnerabilities detected in dependencies.';
            
            if (fs.existsSync('security_report.md')) {
              reportContent = fs.readFileSync('security_report.md', 'utf8');
            }
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,vulnerability',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Security Vulnerabilities Detected',
                body: reportContent,
                labels: ['security', 'vulnerability', 'high-priority']
              });
            }

  # ライセンス準拠チェック
  license_check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "## 📄 License Report" > license_report.md
          echo "" >> license_report.md
          cargo license --json > licenses.json
          
          # 互換性のないライセンスをチェック
          INCOMPATIBLE_LICENSES=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          
          for license in "${INCOMPATIBLE_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "❌ Incompatible license detected: $license" >> license_report.md
              exit 1
            fi
          done
          
          echo "✅ All licenses are compatible" >> license_report.md

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            license_report.md
            licenses.json
          retention-days: 30

  # 設定ファイルのセキュリティチェック
  config_security:
    name: Configuration Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for secrets in code
        run: |
          echo "Scanning for potential secrets..."
          
          # 一般的なシークレットパターンをチェック
          SECRET_PATTERNS=(
            "password.*=.*['\"][^'\"]*['\"]"
            "secret.*=.*['\"][^'\"]*['\"]"
            "api_key.*=.*['\"][^'\"]*['\"]"
            "private_key.*=.*['\"][^'\"]*['\"]"
            "token.*=.*['\"][^'\"]*['\"]"
          )
          
          found_secrets=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" src/ --exclude-dir=target; then
              echo "⚠️ Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [[ "$found_secrets" == "true" ]]; then
            echo "❌ Potential secrets detected in source code"
            exit 1
          else
            echo "✅ No secrets detected in source code"
          fi

      - name: Check environment configuration
        run: |
          echo "Checking environment configuration security..."
          
          # .env.exampleファイルの内容をチェック
          if [[ -f .env.example ]]; then
            # デフォルト値やプレースホルダーを使っていないかチェック
            if grep -E "(password|secret|key).*=.*(password|secret|changeme|default)" .env.example; then
              echo "❌ Insecure default values found in .env.example"
              exit 1
            fi
          fi
          
          echo "✅ Environment configuration looks secure"

  # Dockerセキュリティスキャン
  docker_security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: cosmic-gardener:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cosmic-gardener:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy for human readable output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cosmic-gardener:security-scan'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  # コードセキュリティ分析
  code_security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run security-focused Clippy lints
        run: |
          cargo clippy --all-targets --all-features -- \
            -W clippy::suspicious \
            -W clippy::complexity \
            -W clippy::perf \
            -W clippy::correctness \
            -D warnings

      - name: Install cargo-geiger (unsafe code detector)
        run: cargo install cargo-geiger

      - name: Scan for unsafe code
        run: |
          echo "## 🔍 Unsafe Code Report" > unsafe_report.md
          echo "" >> unsafe_report.md
          
          cargo geiger --format GitHubMarkdown >> unsafe_report.md || true

      - name: Upload unsafe code report
        uses: actions/upload-artifact@v4
        with:
          name: unsafe-code-report
          path: unsafe_report.md
          retention-days: 30

  # SBOM（Software Bill of Materials）生成
  sbom_generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-sbom
        run: cargo install cargo-sbom

      - name: Generate SBOM
        run: |
          cargo sbom --output-format spdx-json > sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

  # セキュリティレポート統合
  security_report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [vulnerability_scan, license_check, config_security, docker_security, code_security, sbom_generation]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 Cosmic Gardener Security Report" > security_summary.md
          echo "" >> security_summary.md
          echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security_summary.md
          echo "**Commit:** ${{ github.sha }}" >> security_summary.md
          echo "" >> security_summary.md
          
          # 各セキュリティチェックの結果をまとめる
          echo "## 📊 Security Check Results" >> security_summary.md
          echo "" >> security_summary.md
          
          # 脆弱性スキャン結果
          if [[ "${{ needs.vulnerability_scan.result }}" == "success" ]]; then
            echo "✅ **Vulnerability Scan**: Passed" >> security_summary.md
          else
            echo "❌ **Vulnerability Scan**: Failed" >> security_summary.md
          fi
          
          # ライセンスチェック結果
          if [[ "${{ needs.license_check.result }}" == "success" ]]; then
            echo "✅ **License Check**: Passed" >> security_summary.md
          else
            echo "❌ **License Check**: Failed" >> security_summary.md
          fi
          
          # 設定セキュリティチェック結果
          if [[ "${{ needs.config_security.result }}" == "success" ]]; then
            echo "✅ **Configuration Security**: Passed" >> security_summary.md
          else
            echo "❌ **Configuration Security**: Failed" >> security_summary.md
          fi
          
          # Dockerセキュリティスキャン結果
          if [[ "${{ needs.docker_security.result }}" == "success" ]]; then
            echo "✅ **Docker Security**: Passed" >> security_summary.md
          else
            echo "❌ **Docker Security**: Failed" >> security_summary.md
          fi
          
          # コードセキュリティ分析結果
          if [[ "${{ needs.code_security.result }}" == "success" ]]; then
            echo "✅ **Code Security**: Passed" >> security_summary.md
          else
            echo "❌ **Code Security**: Failed" >> security_summary.md
          fi
          
          echo "" >> security_summary.md
          echo "## 📋 Recommendations" >> security_summary.md
          echo "" >> security_summary.md
          echo "- Keep dependencies up to date" >> security_summary.md
          echo "- Regularly review and rotate secrets" >> security_summary.md
          echo "- Monitor security advisories" >> security_summary.md
          echo "- Use least privilege principles" >> security_summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security_summary.md
          retention-days: 90

      - name: Post security summary as comment (if triggered by PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security_summary.md')) {
              const summary = fs.readFileSync('security_summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

  # セキュリティ通知
  notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [vulnerability_scan, license_check, config_security, docker_security, code_security]
    if: failure()
    
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 **Security Alert: Cosmic Gardener Backend**
            
            One or more security checks have failed:
            - Vulnerability Scan: ${{ needs.vulnerability_scan.result }}
            - License Check: ${{ needs.license_check.result }}
            - Configuration Security: ${{ needs.config_security.result }}
            - Docker Security: ${{ needs.docker_security.result }}
            - Code Security: ${{ needs.code_security.result }}
            
            🔗 Action: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            📋 Please review and address the security issues immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security incident issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Incident: Failed Security Checks',
              body: `
              ## Security Alert
              
              Automated security checks have detected issues that require immediate attention.
              
              **Failed Checks:**
              - Vulnerability Scan: ${{ needs.vulnerability_scan.result }}
              - License Check: ${{ needs.license_check.result }}
              - Configuration Security: ${{ needs.config_security.result }}
              - Docker Security: ${{ needs.docker_security.result }}
              - Code Security: ${{ needs.code_security.result }}
              
              **Action Required:**
              1. Review the failed security checks
              2. Address identified vulnerabilities
              3. Update dependencies if necessary
              4. Re-run security scans after fixes
              
              **Links:**
              - [Security Scan Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [Security Policy](./SECURITY.md)
              
              /label security high-priority incident
              /assign @security-team
              `,
              labels: ['security', 'incident', 'high-priority'],
              assignees: ['security-team']
            });
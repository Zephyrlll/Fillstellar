# ===============================================
# Docker Compose for Cosmic Gardener Backend
# Development and Testing Environment
# ===============================================

version: '3.8'

services:
  # ===============================================
  # Database Service (PostgreSQL with PostGIS)
  # ===============================================
  postgres:
    image: postgis/postgis:15-3.3
    container_name: cosmic-gardener-postgres
    environment:
      POSTGRES_DB: cosmic_gardener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
      - ./scripts/postgres/:/scripts/
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cosmic_gardener"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===============================================
  # Cache Service (Redis)
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: cosmic-gardener-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - cosmic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ===============================================
  # Backend Application
  # ===============================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-runtime}
    container_name: cosmic-gardener-backend
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/cosmic_gardener
      REDIS_URL: redis://redis:6379/0
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      RUST_LOG: ${RUST_LOG:-info}
      RUST_BACKTRACE: ${RUST_BACKTRACE:-1}
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - cosmic-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ===============================================
  # Development Backend (Hot Reload)
  # ===============================================
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cosmic-gardener-backend-dev
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/cosmic_gardener
      REDIS_URL: redis://redis:6379/0
      RUST_LOG: debug
      RUST_BACKTRACE: full
      JWT_SECRET: dev-secret-key
    ports:
      - "8080:8080"
    volumes:
      - .:/workspace
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/workspace/target
    networks:
      - cosmic-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - development
    command: cargo watch -x "run --bin cosmic-gardener-server"

  # ===============================================
  # Monitoring Services
  # ===============================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cosmic-gardener-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cosmic-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cosmic-gardener-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - cosmic-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cosmic-gardener-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - cosmic-network
    profiles:
      - monitoring
    restart: unless-stopped

  # ===============================================
  # Testing Services
  # ===============================================
  
  # Test database
  postgres-test:
    image: postgis/postgis:15-3.3
    container_name: cosmic-gardener-postgres-test
    environment:
      POSTGRES_DB: cosmic_gardener_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - cosmic-network
    profiles:
      - testing
    tmpfs:
      - /var/lib/postgresql/data

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: cosmic-gardener-redis-test
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    networks:
      - cosmic-network
    profiles:
      - testing

  # ===============================================
  # Load Testing
  # ===============================================
  k6:
    image: loadimpact/k6:latest
    container_name: cosmic-gardener-k6
    volumes:
      - ./tests/load:/scripts
    networks:
      - cosmic-network
    profiles:
      - loadtest
    depends_on:
      - backend
    command: run /scripts/load-test.js

# ===============================================
# Networks
# ===============================================
networks:
  cosmic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===============================================
# Volumes
# ===============================================
volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  cargo_cache:
    driver: local
  target_cache:
    driver: local

# ===============================================
# Development Commands
# ===============================================
# 
# Start development environment:
#   docker-compose --profile development up
#
# Start with monitoring:
#   docker-compose --profile development --profile monitoring up
#
# Run tests:
#   docker-compose --profile testing up -d postgres-test redis-test
#   docker-compose run --rm backend cargo test
#
# Load testing:
#   docker-compose --profile loadtest up
#
# Production simulation:
#   docker-compose up backend postgres redis
#
# Clean up:
#   docker-compose down -v
#